/* SPDX-License-Identifier: BSD-3-Clause */
/*
 * Author(s): Marc Rittinghaus <marc.rittinghaus@kit.edu>
 *
 * Copyright (c) 2021, Karlsruhe Institute of Technology. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __PLAT_CMN_ARM_TRAPS_H__
#define __PLAT_CMN_ARM_TRAPS_H__

#include <uk/arch/traps.h>

#define DECLARE_TRAP_EVENT(event)	\
	UK_EVENT(event)

static const char *arm64_exception_table[ARM64_EXCEPTION_MAX] = {
	"invalid op",     /* ARM64_EXCEPTION_INVALID_OP */
	"debug",          /* ARM64_EXCEPTION_DEBUG */
	"page fault",     /* ARM64_EXCEPTION_PAGE_FAULT */
	"bus error",      /* ARM64_EXCEPTION_BUS_ERROR */
	"floating point", /* ARM64_EXCEPTION_MATH */
	"security",       /* ARM64_EXCEPTION_SECURITY */
	"system call",    /* ARM64_EXCEPTION_SYSCALL */
};

/* Mapping of the fault status code (FSC) for instruction and data aborts to
 * trap type (either page fault or bus error). Zero means invalid. The map
 * takes 64 bytes but saves a ton of comparisons.
 */
static const __u8 arm64_exception_map[] = {
	[ESR_ISS_ABRT_FSC_ADDR_L0]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_ADDR_L1]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_ADDR_L2]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_ADDR_L3]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_TRANS_L0]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_TRANS_L1]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_TRANS_L2]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_TRANS_L3]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_ACCF_L0]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_ACCF_L1]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_ACCF_L2]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_ACCF_L3]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_PERM_L0]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_PERM_L1]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_PERM_L2]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_PERM_L3]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_SYNC]			= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_TAG]			= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_SYNC_PT_LM1]		= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_PT_L0]		= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_PT_L1]		= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_PT_L2]		= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_PT_L3]		= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_ECC]		= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_ECC_PT_LM1]	= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_ECC_PT_L0]	= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_ECC_PT_L1]	= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_ECC_PT_L2]	= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_SYNC_ECC_PT_L3]	= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_ALIGN]		= ARM64_EXCEPTION_BUS_ERROR,
	[ESR_ISS_ABRT_FSC_ADDR_LM1]		= ARM64_EXCEPTION_PAGE_FAULT,
	[ESR_ISS_ABRT_FSC_TRANS_LM1]		= ARM64_EXCEPTION_PAGE_FAULT
};

#endif /* __PLAT_CMN_ARM_TRAPS_H__ */
